---

version: "3.3"

services:

  livy:
    image: scality/clueso-livy:0.4.0
    hostname: livy
    ports:
      - "8998:8998"
      - "4040-4056:4040-4056"
      - "5005:5005"
    expose:
      - "8998"
      - "10800"
      - "11211"
      - "47400-47500"
      - "47100"
    depends_on:
      - kafka
      - spark-master
      - graphite
    networks:
      - backend
      - frontend-dmz
    deploy:
      placement:
        constraints:
          - node.labels.io.zenko.type == livy
    #logging:
     #  options:
      #   max-size: "1g"
       #  max-file: "5"

  spark-master:
    image: scality/clueso-spark-master:hadoop2.8
    hostname: spark-master
    depends_on:
      - kafka
      - graphite
      - lb
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      AWS_ACCESS_KEY_ID: accessKey1
      AWS_SECRET_ACCESS_KEY: verySecretKey1 
    secrets:
      - s3-credentials
    networks:
      - backend
      - frontend-dmz
    deploy:
      placement:
        constraints:
          - node.labels.io.zenko.type == livy

  spark-worker:
    image: scality/clueso-spark-worker:hadoop2.8
    depends_on:
      - spark-master
      - kafka
      - graphite
      - lb
    environment:
      SPARK_MASTER_HOST: spark://spark-master:7077
      CLUSTER_DNS: spark-worker
      INIT_REPLICATE: 1
    networks:
      - backend
    deploy:
      replicas: 4
 
  graphite:
    image: scality/clueso-grafana-graphite
    ports:
      - '8001:80'
      - '8081:81'
      - '8125:8125/udp'
      - '8126:8126'
      - '2003:2003'
      - '2004:2004'
      - '7002:7002'
      - '3000:3000'
    networks:
      - backend
    deploy:
      placement:
        constraints:
          - node.labels.io.zenko.type == livy

  zookeeper:
    image: zookeeper
    hostname: zookeeper
    ports:
      - '2181'
    networks:
      - backend
    #volumes:
     # - "zookeeper-datalog:/datalog:rw"
     # - "zookeeper-data:/data:rw"
    environment:
      - "ZOO_MAX_CLIENT_CNXNS=240"
    deploy:
      mode: replicated
      placement:
        constraints:
          - node.labels.io.zenko.type == storage

  kafka:
    image: scality/kafka:clueso
    hostname: kafka
    ports:
      - "9092"
   # volumes:
    #  - "kafka-data:/data:rw"
    environment:
      - "ADVERTISED_HOST=kafka"
      - "ADVERTISED_PORT=9092"
    networks:
      - backend
    depends_on:
      - zookeeper
# please remove assignment below before commit TODO 
    deploy:
      placement:
        constraints:
          - node.labels.io.zenko.type == livy

  backbeat:
    image: scality/backbeat:clueso
    networks:
      - backend
    command: npm run queue_populator
    depends_on:
       - spark-master
       - zookeeper
       - kafka
       - s3-front
       - s3-metadata
    deploy:
      mode: replicated
 
  s3-data:
     image: scality/s3server:clueso
     ports:
       - "9991:9991"
     networks:
       - backend
     environment:
       S3DATAPATH: /data
       LISTEN_ADDR: 0.0.0.0
     volumes:
       - "s3-data:/data:rw"
     command: npm run start_dataserver
     deploy:
       placement:
         constraints:
           - node.labels.io.zenko.type == storage

  s3-metadata:
    image: scality/s3server:clueso
    ports:
      - "9990:9990"
    networks:
      - backend
    environment:
      S3METADATAPATH: /metadata
      LISTEN_ADDR: 0.0.0.0
      RECORDLOG_ENABLED: "true"
    volumes:
      - 's3-metadata:/metadata:rw'
    command: npm run start_mdserver
    deploy:
      placement:
        constraints:
          - node.labels.io.zenko.type == storage

  s3-front:
    image: scality/s3server:clueso
    ports:
      - "8000"
    networks:
      - backend
      - frontend
      - frontend-dmz
    environment:
      DATA_HOST: s3-data
      METADATA_HOST: s3-metadata
      REDIS_HOST: cache
      ENDPOINT: "${ENDPOINT:-zenko}"
      RECORDLOG_ENABLED: "true"
    secrets:
      - s3-credentials
    command: npm run start_s3server
    depends_on:
      - s3-data
      - s3-metadata
      - cache
    deploy:
      mode: replicated
      update_config:
        parallelism: 1
        delay: "10s"
        monitor: "5s"

  cache:
    image: redis:alpine
    ports:
      - "6379"
    networks:
      - backend

  lb:
    image: zenko/loadbalancer
    ports:
      - "80:80"
    environment:
      LISTEN_PORT: 80
      UPSTREAM_SERVER: "s3-front:8000"
    networks:
      - frontend
      - frontend-dmz
    depends_on:
      - s3-front
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: "10s"
        monitor: "5s"

networks:
  backend:
  frontend:
  frontend-dmz:

volumes:
  s3-data:
  s3-metadata:
  kafka-data:
  zookeeper-data:
  zookeeper-datalog:

secrets:
  s3-credentials:
    file: ./secrets.txt
