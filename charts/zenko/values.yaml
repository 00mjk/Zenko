# Default values for zenko.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
ingress:
  enabled: false
  # Used to create an Ingress record.
  # This must match the 'cloudserver-front' 'endpoint', unless your client
  # supports different hostnames.
  hosts:
    - zenko.local
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls:
    # Secrets must be manually created in the namespace.
    # - secretName: zenko-tls
    #   hosts:
    #     - zenko.example.com

# Configuration of the E2E tests
e2e:
  image:
    repository: docker.io/zenko/zenko-e2e
    tag: latest
    pullPolicy: Always


cloudserver-front:
  orbit:
    enabled: false
  # When 'orbit.enabled' is 'true', these aren't used, please use
  # https://zenko.io to manage your deployment
  endpoint: zenko.local
  credentials:
    keyId: deployment-specific-access-key
    secretKey: deployment-specific-secret-key
  # set locations and disable orbit to use locally defined locations
  # and replication sites
  locationConstraints:
    # required default location
    us-east-1:
      type: file
      legacyAwsBehavior: true
    # awsbackend:
    #   type: aws_s3
    #   legacyAwsBehavior: true
    #   details:
    #     bucketMatch: true
    #     awsEndpoint: s3.amazonaws.com
    #     bucketName: bucketName
    #     credentials:
    #       accessKey: accessKey
    #       secretKey: secretKey
    # azurebackend:
    #   type: azure
    #   legacyAwsBehavior: true
    #   details:
    #     azureStorageEndpoint: https://accountName.blob.core.fake.net/
    #     azureStorageAccountName: accountName
    #     azureStorageAccessKey: accessKey
    #     azureContainerName: containerName
    # gcpbackend:
    #   type: gcp
    #   legacyAwsBehavior: true
    #   details:
    #     bucketMatch: false
    #     gcpEndpoint: storage.googleapis.com
    #     bucketName: gcpBucketName
    #     mpuBucketName: gcpBucketNameMpu
    #     credentials:
    #       accessKey: accessKey
    #       secretKey: secretKey
  replicationEndpoints:
    # - awsbackend
    # - azurebackend
    # - gcpbackend

backbeat:
  orbit:
    enabled: false
  # replication site bootstrap list
  bootstrapList:
    # - site: awsbackend
    #   type: aws_s3
    # - site: azurebackend
    #   type: azure
    # - site: gcpbackend
    #   type: gcp
  # cloudserver account to use for performing replication commands
  s3Accounts:
    # - name: Replication
    #   keyId: deployment-specific-access-key
    #   secretKey: deployment-specific-secret-key

prometheus:
  rbac:
    create: true

  alertmanager:
    enabled: false

  kubeStateMetrics:
    enabled: false

  nodeExporter:
    enabled: false

  pushgateway:
    enabled: false

mongodb-replicaset:
  replicaSet: rs0
  replicas: 3

zenko-queue:
## Extensive list of configurables can be found here:
## https://github.com/kubernetes/charts/blob/master/incubator/kafka/values.yaml
  replicas: 3
  rbac:
    enabled: true
  configurationOverrides:
    "offsets.topic.replication.factor": 3 # - replication factor for the offsets topic
    "num.partitions": 1                   # - default number of log partitions per topic
    "auto.create.topics.enable": true     # - enable auto creation of topic on the server
    "min.insync.replicas": 2              # - min number of replicas that must acknowledge a write
  prometheus:
    jmx:
      enabled: true
    kafka:
      enabled: true
zookeeper:
  enabled: false # Disables zenko-queue from deploying its own quorum

zenko-quorum:
## Extensive list of configurables can be found here:
## https://github.com/kubernetes/charts/blob/master/incubator/zookeeper/values.yaml
  replicaCount: 3
  exporters:
    jmx:
      enabled: true

redis:
  usePassword: false
  persistence:
    enabled: false
  metrics:
    enabled: true

redis-ha:
  rbac:
    create: true
  replicas:
    servers: 3
    sentinels: 3
