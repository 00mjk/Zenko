apiVersion: v1
kind: PersistentVolume
metadata:
  name: s3-data-pv
  labels:
    type: local
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /opt/data/s3-data-pv
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: s3-metadata-pv
  labels:
    type: local
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /opt/data/s3-metadata-pv
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: quorum-data-pv
  labels:
    type: local
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /opt/data/quorum-data-pv
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: quorum-datalog-pv
  labels:
    type: local
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /opt/data/quorum-datalog-pv
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: queue-journal-pv
  labels:
    type: local
spec:
  capacity:
    storage: 15Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /opt/data/queue-journal-pv
---
apiVersion: v1
kind: Service
metadata:
  name: s3-data
spec:
  ports:
    - port: 9992
  selector:
    app: s3-data
    tier: backend
  clusterIP: None
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s3-data-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: s3-data
spec:
  selector:
    matchLabels:
      app: s3-data
      tier: backend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: s3-data
        tier: backend
    spec:
      containers:
      - image: zenko/cloudserver:pensieve-0
        name: s3-data
        env:
        - name: S3DATAPATH
          value: /data
        - name: LISTEN_ADDR
          value: 0.0.0.0
        args: ["npm", "run", "start_dataserver"]
        ports:
        - containerPort: 9992
          name: s3-data
        volumeMounts:
        - name: s3-data-persistent-storage
          mountPath: /data
      volumes:
      - name: s3-data-persistent-storage
        persistentVolumeClaim:
          claimName: s3-data-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: s3-metadata
spec:
  ports:
    - port: 9993
  selector:
    app: s3-metadata
    tier: backend
  clusterIP: None
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s3-metadata-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: s3-metadata
spec:
  selector:
    matchLabels:
      app: s3-metadata
      tier: backend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: s3-metadata
        tier: backend
    spec:
      containers:
      - image: zenko/cloudserver:pensieve-0
        name: s3-metadata
        env:
        - name: S3METADATAPATH
          value: /metadata
        - name: LISTEN_ADDR
          value: 0.0.0.0
        - name: RECORDLOG_ENABLED
          value: "true"
        - name: DEBUG
          value: "socket.io*"
        args: ["npm", "run", "start_mdserver"]
        ports:
        - containerPort: 9993
          name: s3-metadata
        volumeMounts:
        - name: s3-metadata-persistent-storage
          mountPath: /metadata
      volumes:
      - name: s3-metadata-persistent-storage
        persistentVolumeClaim:
          claimName: s3-metadata-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: s3-front
spec:
  ports:
    - port: 8001
  selector:
    app: s3-front
    tier: frontend-dmz
  clusterIP: None
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: s3-front
spec:
  selector:
    matchLabels:
      app: s3-front
      tier: frontend-dmz
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: s3-front
        tier: frontend-dmz
    spec:
      containers:
      - image: zenko/cloudserver:pensieve-0
        name: s3-front
        env:
        - name: DATA_HOST
          value: s3-data
        - name: METADATA_HOST
          value: s3-metadata
        - name: REDIS_HOST
          value: cache
        - name: ENDPOINT
          value: "${ENDPOINT:-zenko}"
        - name: MANAGEMENT_ENDPOINT
          value: "https://api.zenko.io"
        - name: REMOTE_MANAGEMENT_DISABLE
          value: "1"
        args: ["npm", "run", "start_s3server"]
#        args: ["npm", "run", "mem_backend"]
        ports:
        - containerPort: 8001
          name: s3-front
        volumeMounts:
        - name: s3-creds
          mountPath: /run/secrets
      volumes:
      - name: s3-creds
        secret:
          secretName: s3-creds
---
apiVersion: v1
kind: Service
metadata:
  name: zenko-prod-lb
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  selector:
    app: zenko-prod-lb
    tier: frontend-dmz
    type: LoadBalancer
---
kind: Deployment
apiVersion: apps/v1beta2
metadata:
  name: zenko-prod-lb
spec:
  selector:
    matchLabels:
      app: zenko-prod-lb
      tier: frontend-dmz
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: zenko-prod-lb
        tier: frontend-dmz
    spec:
      containers:
      - image: zenko/loadbalancer
        name: zenko-prod-lb
        env:
        - name: LISTEN_PORT
          value: "80"
        - name: UPSTREAM_SERVER
          value: "s3-front:8001"
---
apiVersion: v1
kind: Service
metadata:
  name: cache
spec:
  ports:
    - port: 6379
  selector:
    app: cache
    tier: backend
---
kind: Deployment
apiVersion: apps/v1beta2
metadata:
  name: cache
spec:
  selector:
    matchLabels:
      app: cache
      tier: backend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: cache
        tier: backend
    spec:
      containers:
      - image: redis:alpine
        name: cache
---
apiVersion: v1
kind: Service
metadata:
  name: quorum
  labels:
    app: quorum
spec:
  ports:
  - name: client
    port: 2181
    protocol: TCP
  - name: follower
    port: 2888
    protocol: TCP
  - name: leader
    port: 3888
    protocol: TCP
  selector:
    app: quorum
    tier: backend
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: quorum-data-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: quorum-datalog-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: quorum
spec:
  template:
    metadata:
      labels:
        app: quorum
        tier: backend
    spec:
      containers:
      - name: quorum
        image: zookeeper:3.4.11
        ports:
        - containerPort: 2181
        volumeMounts:
          - name: quorum-data-persistent-storage
            mountPath: /data
          - name: quorum-datalog-persistent-storage
            mountPath: /datalog
      volumes:
        - name: quorum-data-persistent-storage
          persistentVolumeClaim:
            claimName: quorum-data-pv-claim
        - name: quorum-datalog-persistent-storage
          persistentVolumeClaim:
            claimName: quorum-datalog-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: queue
  labels:
    name: queue
spec:
  ports:
  - port: 9092
    name: kafka-port
    protocol: TCP
  selector:
    app: queue
    id: "1"
    tier: backend
  type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: queue-journal-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 15Gi
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: queue
spec:
  template:
    metadata:
      labels:
        app: queue
        id: "1"
    spec:
      containers:
      - name: queue
        image: wurstmeister/kafka:1.0.0
        ports:
        - containerPort: 9092
        env:
        - name: KAFKA_ADVERTISED_PORT
          value: "9092"
        - name: KAFKA_ADVERTISED_HOST_NAME
          value: queue
        - name: KAFKA_CREATE_TOPICS
          value: "backbeat-replication:1:1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "quorum:2181"
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_HEAP_OPTS
          value: "-Xmx512M"
        - name: KAFKA_LOG_DIRS 
          value: "/kafka/kafka-logs"
        volumeMounts:
          - name: queue-journal-persistent-storage
            mountPath: /kafka
      volumes:
        - name: queue-journal-persistent-storage
          persistentVolumeClaim:
            claimName: queue-journal-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: backbeat-producer
  labels:
    name: backbeat-producer
spec:
  ports: 
    - port: 9092
  selector:
    app: backbeat-producer
    tier: backend
---
kind: Deployment
apiVersion: apps/v1beta2
metadata:
  name: backbeat-producer
spec:
  selector:
    matchLabels:
      app: backbeat-producer
      tier: backend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: backbeat-producer
        tier: backend
    spec:
      containers:
      - name: backbeat-producer
        image: zenko/backbeat:pensieve-2
        env:
        - name: ZOOKEEPER_AUTO_CREATE_NAMESPACE
          value: "1"
        - name: ZOOKEEPER_CONNECTION_STRING
          value: "quorum:2181"
        - name: KAFKA_HOSTS
          value: "queue:9092"
        - name: QUEUE_POPULATOR_DMD_HOST
          value: "s3-metadata"
        - name: QUEUE_POPULATOR_DMD_PORT
          value: "9993"
        args: ["npm", "run", "queue_populator"]
---
apiVersion: v1
kind: Service
metadata:
  name: backbeat-consumer
  labels:
    name: backbeat-consumer
spec:
  ports: 
    - port: 9092
  selector:
    app: backbeat-consumer
    tier: backend
---
kind: Deployment
apiVersion: apps/v1beta2
metadata:
  name: backbeat-consumer
spec:
  selector:
    matchLabels:
      app: backbeat-consumer
      tier: backend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: backbeat-consumer
        tier: backend
    spec:
      containers:
      - name: backbeat-consumer
        image: zenko/backbeat:pensieve-2
        env:
        - name: ZOOKEEPER_AUTO_CREATE_NAMESPACE
          value: "1"
        - name: ZOOKEEPER_CONNECTION_STRING
          value: "quorum:2181"
        - name: KAFKA_HOSTS
          value: "queue:9092"
        - name: EXTENSIONS_REPLICATION_SOURCE_AUTH_TYPE
          value: service
        - name: EXTENSIONS_REPLICATION_SOURCE_AUTH_ACCOUNT
          value: service-replication
        - name: EXTENSIONS_REPLICATION_SOURCE_S3_HOST
          value: zenko-cloudserver-replicator
        - name: EXTENSIONS_REPLICATION_SOURCE_S3_PORT
          value: "8001"
        - name: EXTENSIONS_REPLICATION_DEST_AUTH_TYPE
          value: service
        - name: EXTENSIONS_REPLICATION_DEST_AUTH_ACCOUNT
          value: service-replication
        - name: EXTENSIONS_REPLICATION_DEST_BOOTSTRAPLIST
          value: "zenko-cloudserver-replicator:8001"
        - name: QUEUE_POPULATOR_DMD_HOST
          value: "s3-metadata"
        - name: QUEUE_POPULATOR_DMD_PORT
          value: "9993"
        args: ["npm", "run", "queue_processor"]
