nodeCount: &nodeCount 1

ingress:
  enabled: true
  hosts:
    - "zenko.local"

cloudserver:
  replicaCount: *nodeCount
  replicaFactor: *nodeCount
  mongodb:
    replicas: *nodeCount

backbeat:
  replication:
    dataProcessor:
      replicaCount: *nodeCount
      replicaFactor: 1
    statusProcessor:
      replicaCount: *nodeCount
  lifecycle:
    bucketProcessor:
      replicaCount: *nodeCount
    objectProcessor:
      replicaCount: *nodeCount
  garbageCollector:
    consumer:
      replicaCount: *nodeCount
  mongodb:
    replicas: *nodeCount

zenko-nfs:
  mongodb:
    replicas: *nodeCount

zenko-queue:
  replicas: *nodeCount
  kafkaHeapOptions: "-Xms256M"
  configurationOverrides:
    "offsets.topic.replication.factor": *nodeCount
    "auto.create.topics.enable": false
    "min.insync.replicas": *nodeCount
    "message.max.bytes": "5000000"
  topics:
    - name: backbeat-gc
      partitions: *nodeCount
      replicationFactor: 1
    - name: backbeat-ingestion
      partitions: *nodeCount
      replicationFactor: 1
    - name: backbeat-lifecycle-object-tasks
      partitions: *nodeCount
      replicationFactor: 1
    - name: backbeat-lifecycle-bucket-tasks
      partitions: *nodeCount
      replicationFactor: 1
    - name: backbeat-metrics
      partitions: *nodeCount
      replicationFactor: 1
    - name: backbeat-replication
      partitions: *nodeCount
      replicationFactor: 1
    - name: backbeat-replication-status
      partitions: *nodeCount
      replicationFactor: 1
    - name: backbeat-replication-failed
      partitions: *nodeCount
      replicationFactor: 1
    - name: backbeat-sanitycheck
      partitions: *nodeCount
      replicationFactor: 1

zenko-quorum:
  replicaCount: *nodeCount
  env:
    ZK_HEAP_SIZE: "256M"

mongodb-replicaset:
  replicaSet: rs0
  replicas: *nodeCount

redis-ha:
  replicas: *nodeCount

prometheus:
  server:
    replicaCount: 1
